#*******************************************************************************

update.prior.sd <- function (prior, beta0, prior.scale, prior.df, sd.x, min.x.sd) 
{
  prior.scale <- prior.scale + 1e-04
  J <- length(beta0)
  if (prior == "t" | prior == "mt")   
    prior.sd <- sqrt((beta0^2 + prior.df * prior.scale^2)/(1 + prior.df)) 
  if (prior == "de" | prior == "mde")     # prior.scale = lamda in Exp(1/(2*lamda^2) )   
    prior.sd <- sqrt(abs(beta0) * prior.scale)
  
  prior.sd <- ifelse(prior.sd > 1e+04, 1e+04, prior.sd) 
  prior.sd <- ifelse(prior.sd < 1e-04, 1e-04, prior.sd)
  prior.sd <- ifelse(sd.x < min.x.sd, 1e-04, prior.sd)
  if (names(beta0)[1] == "(Intercept)") prior.sd[1] <- 1e+10
  prior.sd            
}

## E step
update.scale.p1 <- function(prior = "mde", df=1, b0, ss, theta) 
{
  if (prior == "mde"){
    # exp density
    den0 <- dexp(b0, rate = 1/ss[1])
    den1 <- dexp(b0, rate = 1/ss[2])
    
    # de density
    # den0 <- (2 * ss[1])^(-1) * exp(-abs(b0)/ss[1])
    # den1 <- (2 * ss[2])^(-1) * exp(-abs(b0)/ss[2])
    
  }
  if (prior == "mt"){
    den0 <- (ss[1])^(-1) * (1 + b0^2/(df * ss[1]^2))^(-(df + 1)/2) # t density
    den1 <- (ss[2])^(-1) * (1 + b0^2/(df * ss[2]^2))^(-(df + 1)/2)
  }
  p <- theta * den1 / (theta * den1 + (1 - theta) * den0 + 1e-10) #1e-10: Make sure the denominator is not 0 
  scale <- 1/((1 - p)/ss[1] + p/ss[2] + 1e-10) #1/E(1/S)
  
  list(scale=scale, p=p)
}

## M step: Q2
update.ptheta.group <- function(group.vars, p, w, bb) # group-specific probability
{
  f <- function(theta, w, p, bb) { 
    # theta ~ beta(1, b)  
    sum(p*log(w*theta) + (1-p)*log(1-w*theta)) + sum((bb-1)*log(1-theta))
  }
  
  # define theta using p
  theta <- p
  theta_group <- rep(0.001, length(group.vars))
  
  for (j in 1:length(group.vars)) {  
    vars <- group.vars[[j]]
    #    theta[vars] <- mean(p[vars])  # posterior mode with theta~beta(1,1)
    theta[vars] <- optimize(f, interval=c(0, 1), 
                            w=w[vars], p=p[vars], bb=bb[j], maximum=T)$maximum
    # optimize: Numerical solution rather analytical solution!
    # optimize: searches the interval from lower to upper for a minimum or maximum of the function f with respect to its first argument.
    
    theta_group[j] = mean(theta[vars])
    
  } 
  
  theta <- ifelse(theta < 0.001, 0.001, theta)  #no lower than 0.01!
  theta <- ifelse(theta > 0.999, 0.999, theta)  #no higher than 0.99
  theta <- w * theta
  
  list(theta=theta, theta_group=theta_group)
  
}


update.ptheta.network <- function(theta, p, w) 
{
  phi <- 2
  for (j in 1:length(theta)) {  
    mu <- w %*% theta
    m <- mu[j] - w[j,j]*theta[j]
    a <- m*phi
    b <- (1-m)*phi
    theta[j] <- (p[j] + a)/(1 + a + b) # posterior mean
  } 
  theta <- ifelse(theta < 0.001, 0.001, theta)
  theta <- ifelse(theta > 0.999, 0.999, theta)
  
  theta
}


update.theta.weights <- function (gvars, theta.weights, inter.hierarchy, inter.parents, p)
{
  if (is.null(inter.parents)) 
    stop("'inter.parents' should be given")
  if (!is.list(inter.parents))
    stop("'inter.parents' should be a list") 
  
  xnames <- strsplit(gvars, split=":", fixed=T)
  inter <- unlist(lapply(xnames, function(x){length(x)}))
  
  if (length(inter.parents)!=length(inter[inter==2]))
    stop("interactions are not correctly specified in formula or inter.parents")
  
  p.main <- p[inter==1]
  if (inter.hierarchy=="strong")
    ww <- lapply(inter.parents, 
                 function(x, p.main){ p.main[x[1]] * p.main[x[2]] }, 
                 p.main)
  if (inter.hierarchy=="weak")
    ww <- lapply(inter.parents, 
                 function(x, p.main){ (p.main[x[1]] + p.main[x[2]])/2 }, 
                 p.main)
  
  theta.weights[inter==2] <- unlist(ww)
  theta.weights
}

